scalar JSON
scalar Long

enum AnalysisState {
    PUBLISHED
    UNPUBLISHED
    SUPPRESSED
}

type Analysis @key(fields: "analysisId") {
    analysisId: ID!
    analysisType: String
    analysisVersion: Int
    analysisState: AnalysisState
    publishedAt: String
    updatedAt: String
    firstPublishedAt: String
    studyId: String
    donors: [Donor]
    files: [AnalysisFile]
    repositories: [Repository]
    experiment: JSON
    workflow: Workflow
}

type Donor {
    donorId: ID
    submitterDonorId: String
    gender: String
    specimens: [Specimen]
}

type AnalysisFile {
    objectId: String
    name: String
    size: Long
    fileType: String
    md5Sum: String
    fileAccess: String
    dataType: String
}

type Specimen {
    specimenId: ID
    specimenType: String
    submitterSpecimenId: String
    samples: [Sample]
    tumourNormalDesignation: String
    specimenTissueSource: String
}

type Sample {
    sampleId: ID
    submitterSampleId: String
    sampleType: String
    matchedNormalSubmitterSampleId: String
}

type Workflow @key(fields: "runId") {
    runId: ID!
    workflowName: String
    workflowVersion: String
    inputs: [JSON]
    genomeBuild: String
    analysisTools: [String]
}

type File @key(fields: "objectId") {
    objectId: ID!
    studyId: String
    dataType: String
    fileType: String
    fileAccess: String
    analysis: FileAnalysis
    file: FileMeta
    repositories: [Repository]
    donors: [Donor]
}

type FileAnalysis {
    analysisId: ID
    analysisType: String
    analysisVersion: Int
    analysisState: AnalysisState
    experiment: JSON
}

type FileMeta {
    name: String
    md5sum: String
    size: Long
    dataType: String
    indexFile: IndexFile
}

type IndexFile {
    objectId: String
    name: String
    fileType: String
    md5sum: String
    dataType: String
    size: Long
}

type Repository {
    code: String
    organization: String
    name: String
    type: String
    country: String
    url: String
}

input AnalysisFilter {
    analysisId: String
    analysisType: String
    analysisVersion: Int
    analysisState: AnalysisState
    studyId: String
    donorId: String
    specimenId: String
    sampleId: String
    runId: String
}

input FileFilter {
    objectId: String
    name: String
    fileAccess: String
    dataType: String
    analysisId: String
    studyId: String
    donorId: String
}

input Page {
    size: Int!
    from: Int!
}

directive @fetch(from : String!) on FIELD_DEFINITION

type Run @key(fields: "runId") @extends {
    runId: ID! @external
    parameters: JSON @external
    producedAnalyses(filter: AnalysisFilter): [Analysis] @fetch(from: "producedAnalyses")
    inputAnalyses(filter: AnalysisFilter): [Analysis] @requires(fields: "parameters") @fetch(from: "inputAnalyses")
}

type SampleMatchedAnalysisPair {
    normalSampleAnalysis: Analysis
    tumourSampleAnalysis: Analysis
}

enum AnalysisSortField {
    analysisId,
    analysisState,
    publishedAt,
    updatedAt,
    firstPublishedAt
}

enum FileSortField {
    objectId,
    fileAccess,
    dataType,
    name
}

enum SortOrder {
    asc,
    desc
}

input AnalysisSort {
    fieldName: AnalysisSortField!
    order: SortOrder!
}

input FileSort {
    fieldName: FileSortField!
    order: SortOrder!
}

type SearchResultInfo {
    contentCount: String!
    hasNextFrom: String!
    totalHits: String!
}

type AnalysesSearchResult {
    content: [Analysis!]
    info: SearchResultInfo!
}

type FilesSearchResult {
    content: [File!]
    info: SearchResultInfo!
}

type AggregationResult {
    totalHits: String!
}

extend type Query {
    analyses(filter: AnalysisFilter, page: Page, sorts: [AnalysisSort!]): AnalysesSearchResult!
    aggregateAnalyses(filter: AnalysisFilter): AggregationResult!
    files(filter: FileFilter, page: Page, sorts: [FileSort!]): FilesSearchResult!
    aggregateFiles(filter: FileFilter): AggregationResult!
    """
    Given an analysisId, match it to its tumour-normal counter part with same experimental strategy.
    If analysis is tumour matches matchedNormalSubmitterSampleId to analyses with same submitterSampleId.
    If analysis is normal matches submitterSampleId and matchedNormalSubmitterSampleId.
    Non PUBLISHED analyses are ignored.
    """
    sampleMatchedAnalysisPairs(analysisId: String!): [SampleMatchedAnalysisPair]
}
